gener
is_valve
iter_index
gener_name
no_over_write
empty_error

methods_to_add = (
should return everything from the iterator or mapping into the data type
class dict(iterable, **kwarg)
class frozenset([iterable])
list([iterable])
set([iterable])
tuple([iterable])

valve functions
all(iterable)
any(iterable)
max(iterable, *[, key, default])
min(iterable, *[, key, default])
sum(iterable[, start])
sorted(iterable[, key][, reverse])

non valve functions
enumerate(iterable, start=0)
filter(function, iterable)
map(function, iterable, ...)
zip(*iterables) # should zip in external values. A custom zip internal should be added
  )

maps_to_add = (
has a counterpart that does the iterator while this should do by element
class dict(**kwarg)
class frozenset([iterable])
set([iterable])
list([iterable])
tuple([iterable])
reversed(seq)
sorted(iterable[, key][, reverse])
max(iterable, *[, key, default])
min(iterable, *[, key, default])
sum(iterable[, start])

str(object='')
str(object=b'', encoding='utf-8', errors='strict')
abs(x)
ascii(object)
bin(x)
bool([x])
callable(object)
chr(i)
classmethod(function)
complex([real[, imag]])  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
divmod(a, b)  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
eval(expression, globals=None, locals=None)
float([x])
format(value[, format_spec])  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
getattr(object, name[, default])    # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
hasattr(object, name)    # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
hash(object)
hex(x)
id(object)
int(x, base=10)  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
isinstance(object, classinfo)  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
issubclass(class, classinfo)  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
iter(object[, sentinel])  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
len(s)
oct(x)
open(file, mode='r', buffering=-1, encoding=None, errors=None, newline=None, closefd=True, opener=None)  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
ord(c)
pow(x, y[, z])  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
property(fget=None, fset=None, fdel=None, doc=None)  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
range(stop)  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
range(start, stop[, step])  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
repr(object)
round(number[, ndigits])
staticmethod(function)
super([type[, object-or-type]])  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
type(name, bases, dict)  # https://github.com/BebeSparkelSparkel/functional_pipes/issues/4
  )

not_added = (
bytearray([source[, encoding[, errors]]])
bytes([source[, encoding[, errors]]])
compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)
delattr(object, name)
dir([object])
exec(object[, globals[, locals]])
globals()
help([object])
input([prompt])
locals()
next(iterator[, default])
print(*objects, sep=' ', end='\n', file=sys.stdout, flush=False)
setattr(object, name, value)
reversed(seq)
slice(stop)
slice(start, stop[, step])
vars([object])
  )
